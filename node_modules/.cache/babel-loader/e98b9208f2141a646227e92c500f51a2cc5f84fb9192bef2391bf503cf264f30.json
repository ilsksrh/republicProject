{"ast":null,"code":"import axios from \"axios\";\nimport TokenService from \"./token.service\";\nconst instance = axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\ninstance.interceptors.request.use(config => {\n  const token = TokenService.getLocalAccessToken();\n  if (token) {\n    config.headers[\"Authorization\"] = 'Bearer ' + token;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(res => {\n  return res;\n}, async err => {\n  const originalConfig = err.config;\n  if (originalConfig.url !== \"/auth/signin\" && err.response) {\n    // Access Token was expired\n    if (err.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n      try {\n        const rs = await instance.post(\"/auth/refreshtoken\", {\n          refreshToken: TokenService.getLocalRefreshToken()\n        });\n        const {\n          accessToken\n        } = rs.data;\n        TokenService.updateLocalAccessToken(accessToken);\n        return instance(originalConfig);\n      } catch (_error) {\n        // Logout user if token refresh fails\n        TokenService.removeLocalAccessToken();\n        TokenService.removeLocalRefreshToken();\n        // Redirect to login page or perform any other logout action\n        window.location.href = \"/login\"; // Example redirect to login page\n        return Promise.reject(_error);\n      }\n    }\n  }\n  return Promise.reject(err);\n});\nexport default instance;","map":{"version":3,"names":["axios","TokenService","instance","create","baseURL","headers","interceptors","request","use","config","token","getLocalAccessToken","error","Promise","reject","response","res","err","originalConfig","url","status","_retry","rs","post","refreshToken","getLocalRefreshToken","accessToken","data","updateLocalAccessToken","_error","removeLocalAccessToken","removeLocalRefreshToken","window","location","href"],"sources":["C:/Users/Admin/OneDrive/Рабочий стол/masterFront/republicProject/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\r\nimport TokenService from \"./token.service\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    const token = TokenService.getLocalAccessToken();\r\n    if (token) {\r\n      config.headers[\"Authorization\"] = 'Bearer ' + token; \r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\ninstance.interceptors.response.use(\r\n  (res) => {\r\n    return res;\r\n  },\r\n  async (err) => {\r\n    const originalConfig = err.config;\r\n\r\n    if (originalConfig.url !== \"/auth/signin\" && err.response) {\r\n      // Access Token was expired\r\n      if (err.response.status === 401 && !originalConfig._retry) {\r\n        originalConfig._retry = true;\r\n\r\n        try {\r\n          const rs = await instance.post(\"/auth/refreshtoken\", {\r\n            refreshToken: TokenService.getLocalRefreshToken(),\r\n          });\r\n\r\n          const { accessToken } = rs.data;\r\n          TokenService.updateLocalAccessToken(accessToken);\r\n\r\n          return instance(originalConfig);\r\n        } catch (_error) {\r\n          // Logout user if token refresh fails\r\n          TokenService.removeLocalAccessToken();\r\n          TokenService.removeLocalRefreshToken();\r\n          // Redirect to login page or perform any other logout action\r\n          window.location.href = \"/login\"; // Example redirect to login page\r\n          return Promise.reject(_error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,iBAAiB;AAE1C,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC5BC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGT,YAAY,CAACU,mBAAmB,CAAC,CAAC;EAChD,IAAID,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGK,KAAK;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAG,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDV,QAAQ,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC/BQ,GAAG,IAAK;EACP,OAAOA,GAAG;AACZ,CAAC,EACD,MAAOC,GAAG,IAAK;EACb,MAAMC,cAAc,GAAGD,GAAG,CAACR,MAAM;EAEjC,IAAIS,cAAc,CAACC,GAAG,KAAK,cAAc,IAAIF,GAAG,CAACF,QAAQ,EAAE;IACzD;IACA,IAAIE,GAAG,CAACF,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAI,CAACF,cAAc,CAACG,MAAM,EAAE;MACzDH,cAAc,CAACG,MAAM,GAAG,IAAI;MAE5B,IAAI;QACF,MAAMC,EAAE,GAAG,MAAMpB,QAAQ,CAACqB,IAAI,CAAC,oBAAoB,EAAE;UACnDC,YAAY,EAAEvB,YAAY,CAACwB,oBAAoB,CAAC;QAClD,CAAC,CAAC;QAEF,MAAM;UAAEC;QAAY,CAAC,GAAGJ,EAAE,CAACK,IAAI;QAC/B1B,YAAY,CAAC2B,sBAAsB,CAACF,WAAW,CAAC;QAEhD,OAAOxB,QAAQ,CAACgB,cAAc,CAAC;MACjC,CAAC,CAAC,OAAOW,MAAM,EAAE;QACf;QACA5B,YAAY,CAAC6B,sBAAsB,CAAC,CAAC;QACrC7B,YAAY,CAAC8B,uBAAuB,CAAC,CAAC;QACtC;QACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;QACjC,OAAOrB,OAAO,CAACC,MAAM,CAACe,MAAM,CAAC;MAC/B;IACF;EACF;EAEA,OAAOhB,OAAO,CAACC,MAAM,CAACG,GAAG,CAAC;AAC5B,CACF,CAAC;AAED,eAAef,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}