{"ast":null,"code":"import api from \"./api\";\nimport TokenService from \"./token.service\";\nclass AuthService {\n  login(username, password) {\n    return api.post(\"/auth/signin\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        TokenService.setUser(response.data); // Store user data including token\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    TokenService.removeUser(); // Remove user data from storage\n  }\n  async register(username, email, password, confirmPassword) {\n    try {\n      const response = await api.post(\"/auth/signup\", {\n        username,\n        email,\n        password,\n        confirmPassword\n      });\n      return response.data;\n    } catch (error) {\n      throw error.response.data; // Throw the error response data\n    }\n  }\n  async getCurrentUser() {\n    try {\n      const user = TokenService.getUser(); // Get user data including token\n      if (user && user.accessToken) {\n        // Verify if token is expired, refresh if necessary\n        await this.refreshTokenIfNeeded(user);\n        return user;\n      }\n      return null;\n    } catch (error) {\n      console.error(\"Error fetching current user:\", error);\n      return null;\n    }\n  }\n  async refreshTokenIfNeeded(user) {\n    const accessToken = user.accessToken;\n    const refreshToken = user.refreshToken;\n\n    // Check if access token is expired\n    if (TokenService.isAccessTokenExpired(accessToken)) {\n      try {\n        const response = await api.post(\"/auth/refreshToken\", {\n          refreshToken\n        });\n        if (response.data.accessToken) {\n          // Update user data with new tokens\n          TokenService.updateUser({\n            ...user,\n            accessToken: response.data.accessToken\n          });\n        }\n      } catch (error) {\n        console.error(\"Error refreshing token:\", error);\n        throw error;\n      }\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["api","TokenService","AuthService","login","username","password","post","then","response","data","accessToken","setUser","logout","removeUser","register","email","confirmPassword","error","getCurrentUser","user","getUser","refreshTokenIfNeeded","console","refreshToken","isAccessTokenExpired","updateUser"],"sources":["C:/Users/Admin/OneDrive/Рабочий стол/masterFront/republicProject/src/services/auth.service.js"],"sourcesContent":["import api from \"./api\";\r\nimport TokenService from \"./token.service\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return api\r\n      .post(\"/auth/signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          TokenService.setUser(response.data); // Store user data including token\r\n        }\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    TokenService.removeUser(); // Remove user data from storage\r\n  }\r\n\r\n  async register(username, email, password, confirmPassword) {\r\n    try {\r\n      const response = await api.post(\"/auth/signup\", {\r\n        username,\r\n        email,\r\n        password,\r\n        confirmPassword\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response.data; // Throw the error response data\r\n    }\r\n  }\r\n\r\n  async getCurrentUser() {\r\n    try {\r\n      const user = TokenService.getUser(); // Get user data including token\r\n      if (user && user.accessToken) {\r\n        // Verify if token is expired, refresh if necessary\r\n        await this.refreshTokenIfNeeded(user);\r\n        return user;\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      console.error(\"Error fetching current user:\", error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async refreshTokenIfNeeded(user) {\r\n    const accessToken = user.accessToken;\r\n    const refreshToken = user.refreshToken;\r\n\r\n    // Check if access token is expired\r\n    if (TokenService.isAccessTokenExpired(accessToken)) {\r\n      try {\r\n        const response = await api.post(\"/auth/refreshToken\", {\r\n          refreshToken\r\n        });\r\n        if (response.data.accessToken) {\r\n          // Update user data with new tokens\r\n          TokenService.updateUser({\r\n            ...user,\r\n            accessToken: response.data.accessToken\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error refreshing token:\", error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,YAAY,MAAM,iBAAiB;AAE1C,MAAMC,WAAW,CAAC;EAChBC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACxB,OAAOL,GAAG,CACPM,IAAI,CAAC,cAAc,EAAE;MACpBF,QAAQ;MACRC;IACF,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7BT,YAAY,CAACU,OAAO,CAACH,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MACvC;MACA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;EAEAG,MAAMA,CAAA,EAAG;IACPX,YAAY,CAACY,UAAU,CAAC,CAAC,CAAC,CAAC;EAC7B;EAEA,MAAMC,QAAQA,CAACV,QAAQ,EAAEW,KAAK,EAAEV,QAAQ,EAAEW,eAAe,EAAE;IACzD,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMR,GAAG,CAACM,IAAI,CAAC,cAAc,EAAE;QAC9CF,QAAQ;QACRW,KAAK;QACLV,QAAQ;QACRW;MACF,CAAC,CAAC;MACF,OAAOR,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACd,MAAMA,KAAK,CAACT,QAAQ,CAACC,IAAI,CAAC,CAAC;IAC7B;EACF;EAEA,MAAMS,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMC,IAAI,GAAGlB,YAAY,CAACmB,OAAO,CAAC,CAAC,CAAC,CAAC;MACrC,IAAID,IAAI,IAAIA,IAAI,CAACT,WAAW,EAAE;QAC5B;QACA,MAAM,IAAI,CAACW,oBAAoB,CAACF,IAAI,CAAC;QACrC,OAAOA,IAAI;MACb;MACA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,IAAI;IACb;EACF;EAEA,MAAMI,oBAAoBA,CAACF,IAAI,EAAE;IAC/B,MAAMT,WAAW,GAAGS,IAAI,CAACT,WAAW;IACpC,MAAMa,YAAY,GAAGJ,IAAI,CAACI,YAAY;;IAEtC;IACA,IAAItB,YAAY,CAACuB,oBAAoB,CAACd,WAAW,CAAC,EAAE;MAClD,IAAI;QACF,MAAMF,QAAQ,GAAG,MAAMR,GAAG,CAACM,IAAI,CAAC,oBAAoB,EAAE;UACpDiB;QACF,CAAC,CAAC;QACF,IAAIf,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;UAC7B;UACAT,YAAY,CAACwB,UAAU,CAAC;YACtB,GAAGN,IAAI;YACPT,WAAW,EAAEF,QAAQ,CAACC,IAAI,CAACC;UAC7B,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdK,OAAO,CAACL,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,MAAMA,KAAK;MACb;IACF;EACF;AACF;AAEA,eAAe,IAAIf,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}