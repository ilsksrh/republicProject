{"ast":null,"code":"import api from \"./api\";\nimport TokenService from \"./token.service\";\nclass AuthService {\n  constructor() {\n    this.updateUser = (user, next) => {\n      if (localStorage.getItem(jwt)) {\n        let auth = JSON.parselocalStorage.getItem(jwt);\n      }\n    };\n  }\n  login(username, password) {\n    return api.post(\"/auth/signin\", {\n      username,\n      password\n    }).then(response => {\n      if (response.data.accessToken) {\n        TokenService.setUser(response.data);\n      }\n      return response.data;\n    });\n  }\n  logout() {\n    TokenService.removeUser();\n  }\n  register(username, email, password, confirmPassword) {\n    return api.post(\"/auth/signup\", {\n      username,\n      email,\n      password,\n      confirmPassword\n    });\n  }\n  getCurrentUser() {\n    return TokenService.getUser();\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["api","TokenService","AuthService","constructor","updateUser","user","next","localStorage","getItem","jwt","auth","JSON","parselocalStorage","login","username","password","post","then","response","data","accessToken","setUser","logout","removeUser","register","email","confirmPassword","getCurrentUser","getUser"],"sources":["C:/Users/Admin/OneDrive/Рабочий стол/masterFront/republicProject/src/services/auth.service.js"],"sourcesContent":["import api from \"./api\";\r\nimport TokenService from \"./token.service\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return api\r\n      .post(\"/auth/signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          TokenService.setUser(response.data);\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    TokenService.removeUser();\r\n  }\r\n\r\n  register(username, email, password, confirmPassword) {\r\n    return api.post(\"/auth/signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n      confirmPassword\r\n    });\r\n  }\r\n  \r\n\r\n  getCurrentUser() {\r\n    return TokenService.getUser();\r\n  }\r\n\r\n  updateUser = (user, next) =>{\r\n    if(localStorage.getItem(jwt)){\r\n      let auth  = JSON.parselocalStorage.getItem(jwt);\r\n\r\n    }\r\n\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default new AuthService();"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,OAAOC,YAAY,MAAM,iBAAiB;AAE1C,MAAMC,WAAW,CAAC;EAAAC,YAAA;IAAA,KAkChBC,UAAU,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAI;MAC1B,IAAGC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,EAAC;QAC3B,IAAIC,IAAI,GAAIC,IAAI,CAACC,iBAAiB,CAACJ,OAAO,CAACC,GAAG,CAAC;MAEjD;IAEF,CAAC;EAAA;EAvCDI,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IACxB,OAAOf,GAAG,CACPgB,IAAI,CAAC,cAAc,EAAE;MACpBF,QAAQ;MACRC;IACF,CAAC,CAAC,CACDE,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAIA,QAAQ,CAACC,IAAI,CAACC,WAAW,EAAE;QAC7BnB,YAAY,CAACoB,OAAO,CAACH,QAAQ,CAACC,IAAI,CAAC;MACrC;MAEA,OAAOD,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC;EACN;EAEAG,MAAMA,CAAA,EAAG;IACPrB,YAAY,CAACsB,UAAU,CAAC,CAAC;EAC3B;EAEAC,QAAQA,CAACV,QAAQ,EAAEW,KAAK,EAAEV,QAAQ,EAAEW,eAAe,EAAE;IACnD,OAAO1B,GAAG,CAACgB,IAAI,CAAC,cAAc,EAAE;MAC9BF,QAAQ;MACRW,KAAK;MACLV,QAAQ;MACRW;IACF,CAAC,CAAC;EACJ;EAGAC,cAAcA,CAAA,EAAG;IACf,OAAO1B,YAAY,CAAC2B,OAAO,CAAC,CAAC;EAC/B;AAWF;AAEA,eAAe,IAAI1B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}